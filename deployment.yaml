project:
  name: ContestHub
  description: |
    ContestHub is a web application that aggregates upcoming programming contests 
    from multiple platforms (Codeforces, LeetCode, CodeChef, HackerRank).
    Users can view contests, subscribe for notifications, and manage profiles.

structure:
  public:
    - index.html          # Main entry point (Netlify/Render default)
    - login.html          # Login/Register page
    - styles.css          # Custom CSS for UI
    - app.js              # Frontend logic (UI, fetch, profile, notifications)
    - server.js           # Backend (Express API to fetch contests)
    - README.md           # Project documentation
    - contests-container  # Dynamic contest cards generated in DOM

frontend:
  language: HTML, CSS, JavaScript (Vanilla)
  features:
    - Navbar with Home, Profile, Notifications
    - Contest cards (name, site, start time, duration, join link)
    - Search bar for filtering contests
    - LocalStorage-based login/register
    - Profile tab with user info & subscribed contests
    - Notifications tab (upcoming contests)

backend:
  framework: Node.js + Express
  port: 3001
  endpoints:
    - GET /api/contests:
        description: Fetch contests from multiple platforms
        sources:
          - Codeforces API
          - LeetCode GraphQL API
          - CodeChef API
          - HackerRank API
        response:
          success: boolean
          contests: list of contests
  middleware:
    - cors
    - express.json
    - express.static("public")

contest-model:
  fields:
    - name: string
    - url: string
    - start_time: ISO8601 datetime
    - duration: number (seconds)
    - site: string
    - status: BEFORE | CODING

users:
  storage: LocalStorage
  fields:
    - name
    - email
    - selectedContests (list of contest names)

deployment:
  platforms:
    - Render (https://contesthub-ta7l.onrender.com)
    - Netlify (optional, for static only)
  entrypoint: index.html
  notes:
    - Render used for full-stack (Express + frontend)
    - Netlify only works for static frontend (without backend API)

next-steps:
  - Add database for persistent users (SQLite or MongoDB)
  - Add push/email notifications for subscribed contests
  - Improve UI with Tailwind/Bootstrap
  - Add authentication (JWT + hashed passwords)
